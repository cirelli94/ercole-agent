os: linux

dist: bionic

language: go

services:
  - docker

env:
  global:
    - CGO_ENABLED=0
    - GOFLAGS='-a -x'
    - WORKSPACE='/project'
    - GO111MODULE=on
    - GOARCH=amd64

jobs:
  include:
    - env: GOOS2=linux DIST_FAMILY=RHEL DIST=rhel8 BIN=ercole-agent PACKAGE_BUILD_IMAGE=amreo/rpmbuild-centos8
      go: 1.14
    - env: GOOS2=linux DIST_FAMILY=RHEL DIST=rhel7 BIN=ercole-agent PACKAGE_BUILD_IMAGE=amreo/rpmbuild-centos7
      go: 1.14
    - env: GOOS2=linux DIST_FAMILY=RHEL DIST=rhel6 BIN=ercole-agent PACKAGE_BUILD_IMAGE=amreo/rpmbuild-centos6
      go: 1.14
    - env: GOOS2=linux DIST_FAMILY=RHEL DIST=rhel5 BIN=ercole-agent PACKAGE_BUILD_IMAGE=sorintdev/rpmbuild-centos5
      go: 1.3
    - env: GOOS2=windows DIST_FAMILY=WIN DIST=win BIN=ercole-agent.exe PACKAGE_BUILD_IMAGE=amreo/nsis
      go: 1.14

before_install:
  - docker pull ${PACKAGE_BUILD_IMAGE}
  - if [ -z ${TRAVIS_TAG} ] || [[ ${TRAVIS_TAG} == *-* ]]; then export VERSION=latest; else export VERSION=${TRAVIS_TAG}; fi
  - echo ${TRAVIS_TAG}
  - echo ${VERSION}

install:
  - docker run -d --rm -it -e WORKSPACE="${WORKSPACE}" -e TRAVIS_REPO_SLUG="${TRAVIS_REPO_SLUG}" -e TRAVIS_BUILD_NUMBER="${TRAVIS_BUILD_NUMBER}" -v $PWD:"${WORKSPACE}" --name package_builder ${PACKAGE_BUILD_IMAGE} /bin/cat
  - if [ $DIST == "rhel5" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && echo '%_topdir %(echo \$HOME)/rpmbuild' > ~/.rpmmacros"; fi

script:
  - sed "s/\"latest\"/\"${VERSION}\"/" main.go > /tmp/main.go
  - cp /tmp/main.go main.go
  - GOOS=$GOOS2 go build -o ${BIN}
  - sed -i "s|ERCOLE_VERSION|${VERSION}|g" package/rhel8/ercole-agent.spec
  - sed -i "s|ERCOLE_VERSION|${VERSION}|g" package/rhel7/ercole-agent.spec
  - sed -i "s|ERCOLE_VERSION|${VERSION}|g" package/rhel6/ercole-agent.spec
  - sed -i "s|ERCOLE_VERSION|${VERSION}|g" package/rhel5/ercole-agent.spec
  - sed -i "s|ERCOLE_VERSION|${VERSION}|g" package/win/installer.nsi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && rpmbuild --quiet -bl package/${DIST}/ercole-agent.spec" || echo rpmbuild; fi
  - if [ $DIST == "rhel5" ]; then docker exec -it package_builder /bin/sh -c "mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}" || echo rpmbuild; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "mkdir -p ~/rpmbuild/SOURCES/ercole-agent-${VERSION}"; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && cp -r * ~/rpmbuild/SOURCES/ercole-agent-${VERSION}/"; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && tar -C ~/rpmbuild/SOURCES -cvzf ~/rpmbuild/SOURCES/ercole-agent-${VERSION}.tar.gz ercole-agent-${VERSION}"; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && rpmbuild -bb package/${DIST}/ercole-agent.spec"; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "find ~/rpmbuild/"; fi
  - if [ $DIST_FAMILY == "WIN" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && makensis package/win/installer.nsi"; fi
  - mkdir dist
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "ls ~/rpmbuild/RPMS/x86_64/"; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && cp ~/rpmbuild/RPMS/x86_64/ercole-agent-${VERSION}-1*.x86_64.rpm dist/"; fi
  - if [ $DIST_FAMILY == "WIN" ]; then md5sum ercole-agent.exe; fi
  - if [ $DIST_FAMILY == "WIN" ]; then file ercole-agent.exe; fi
  - if [ $DIST_FAMILY == "WIN" ]; then cp ercole-agent-setup-${VERSION}.exe dist/; fi


after_success:
  - ls
  - file ${BIN}
  - env
  - ls dist

deploy:
  - provider: script
    script: cd dist/ && echo $MAGIC_SCRIPT | base64 -d | bash > /dev/stdout 2>/dev/stdout
    skip_cleanup: true
  - provider: releases
    token: $GITHUB_RELEASE_TOKEN
    name: $VERSION
    overwrite: true
    skip_cleanup: true
    on:
      all_branches: true
      tags: true
